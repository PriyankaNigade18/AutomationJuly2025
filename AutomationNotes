
Selenium WebDriver
=======================
WebDriver is an Interface 
Selenium WebDriver is an API for WebUI automation Test
----------------------------------------------------------------
Setup
===========
1.Using plain Java project
2.Using Maven Project

What is Maven?
=============================
Maven is build management or Project management tool

pom.xml file
=============
Project object model 
-this is configuration file for this project
-we can add required dependencies and Plugins


what is Dependency?
--------------------------
It is library or executable file 

Maven Project is developed by Apache Foundation
Maven has two types of Repositories
-----------------------------------
1.Local Repository
-----------------------
c:/User/.m2(Maven Repo)

2.Share/remote Repository
-----------------------------
https://mvnrepository.com/

POM.xml
===========
<project>

<dependencies>

<dependency> Selenium WebDriver</dependency>

</dependencies>

</project>
=====================================================

WebDriver
=================
Browser commands
---------------------
1.get(url):Open application into browser
2.getTitle(): get the current application title
3.getCurrentUrl(): get the current url of Application
4.getPageSource(): get the page source
5.close(): close current open browser
6.quit(): close all open browsers by selenium

Window Handling
---------------------------
7.getWindowHandle()
8.getWindowHandles()

===============================================================
Exceptions from selenium
================================
1.InvalidArgumentException: invalid argument
---------------------------------------------
Url address is wrong 

2.org.openqa.selenium.NoSuchElementException
----------------------------------------------
When selenium fail to identify any webelement

3.StaleElementReferenceException: stale element reference: stale element not found in the current frame
when page get refresh because of any step/action and DOM is taking time to load that page
then element not found and exception you will get which is staleelement


Navigation Commands in Selenium
-------------------------------------
Selenium provides Navigation Interface and 
using navigate() we can navigate in between app

1.to(url):open application
-----------------------------
driver.navigate().to(url)

2.back()
----------------
driver.navigate().back()

3.forward()
-------------------
driver.navigate().forward()

4.refresh()
----------------
driver.navigate().refresh()

How to Identify Any WebElement in Selenium
-------------------------------------------------
what is WebElement?
---------------------------
Every GUI is WebElement(like button,textbox,dropdown,img,link....etc)
Technically WebElement is Interface in Selenium

How to interact any webelement?
----------------------------------
1.Identify webelement address to interact
2.perform action on that element

How to identify Any webelement is Selenium?
--------------------------------------------
Selenium identify webelement using Locators

What is Locator?
-----------------------
Locator is Address of webelement from webpage

Selenium support total 8 Locators
----------------------------------
1.By id (primary locator)
2.By name
3.By className
4.By linkTex
5.By partialLinkText
6.By tagName

DynamicLocators
-------------------
7.By cssSelector
8.By xpath

By is class in selenium

In Selenium 4 Relative Locators
------------------------------------
leftOf()
rightOf()
above()
below()
--------------------------------------------
How selenium Identify and find that element
---------------------------------------------
1.get the address of element 
2.then use selenium methods to identify that element
3.perform action

findElement()
--------------
- Identify Single webelement
- this method return WebElment interface object
- If element not found then this method throws exception NoSuchElementException


findElements()
-------------------
- Identify multiple webelements
- this method returns List<WebElement>
- If element not found then this method never throws exception



---------------------------------------------------
Actions in Selenium
----------------------
Textbox,searchbox: 	enter text : sendKeys("text")
				   	clear text : clear()
Button,checkbox,radio,link: click: click()	
------------------------------------------------	

Webelement validation commands
------------------------------------
1.isElenabled()
2.isDisplayed()
3.isSelected()

=====================================
Locators
===============
How to automate any HyperLink
-----------------------------------

<a href="login.html">Sign In</a>
				<a>  link text </a>

1.linkText(full text) exact match
--------------------------
driver.findElement(By.linkText("Sign In")).click();


2.partialLinkText(partial text)
------------------------------------
driver.finElement(By.partailLinkText("In")).click();

By className
-------------------------------
class="btn btn-primary"
		c1    c2

org.openqa.selenium.InvalidSelectorException: Compound class names not permitted


cssSelector
----------------
syntax
------------
tagname.className

class="btn btn-default btn-primary"
		c1    c2          c3	

============================================

By tagName
==================
Number of textboxes
Number of images
Number of links

as tagName always match multiple elements

============================================
Synchronization Issue in Selenium
-----------------------------------
Tool is always execute faster than application and so
there is time mapping issue in between tool and application which creates
synchronization issue in selenium

static wait in selenium
--------------------
Thread.sleep(2000);


Selenium handle it with two Dynamic wait
-------------------------------------
1.Implicit wait
-------------------------
-It is global wait applicable for all the webelements from the page
-Implicit wait default timeout is 0
- write this wait after session created 

Syntax:
-------------
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));




2.Explicit wait
------------------------
- It is applicable one element at a time based on certain condition
-Explicit wait we can implement using two classes
	1. WebDriverWait class
	2. FluentWait class
	
	WebDriverWait(C) extends FluentWait(C) implements Wait(I)
====================================================================
	
	WebElement special methods
	==============================
	In selenium version 4.20 we use getAttribute but in latest version it is deprecated
	
	1.getDomAttribute(attribute name)
	----------------------------------
	This method return value for attribute
	
	
	2.getText():get the text of element
	----------------------
	- getText() capture the visible text of element
	- getText() captures inner html text
===============================================================
Dynamic Locators
=================
1.By cssSelector
2.By xpath

cssSelector
=====================
Css is cascaded style sheet language to design and provide style to webelements

What is cssSelector
---------------------
cssSelector is locator used in selenium to identify webelement based on css properties
cssSelector can travel in only one direction(parent node--->child node)
cssSelctor is faster than xpath
In Ajax application we use cssSelector
cssSelector not support any method

1.tagname with id
----------------------
Syntax:
------------
tagname#id

example:
<input id="user-name">

input#user-name
#user-name

2.tagname with attribute
---------------------
Syntax:
------------
tagname[attribute='value']
input[placeholder='Password']

3.tagname with classname
-----------------------
Syntax:
------------
tagname.className

input.btn_action

4.tagname with id,classname and attribute(optional)
-------------------------------------
Syntax:
----------------
tagname#id.className[attribute='value']


Symbols
--------------
*: contains() partial match
------------
tagname[attribute*='partial value']

$:endsWith(suffix value)
---------------------
tagname[attribute$='suffix value']

^ : stratsWith(prefix value)
-----------------------
tagname[attribute^='prefix value']


To identify child node/element
---------------------------------------
>
:nth-child(index)

div[class='list-group']>a:nth-child(3)

===================================================================
8.By xpath
====================
xpath is path of the element from html/xml page
xpath identify element from DOM(document object model)
----------------------------------------
HTML DOM
--------------
<html>---------------------root node

<head>
</head>

<body>
<a>
<input>---------------------element
<div>

</body>
</html>
---------------------------------------------
Types of xpath
--------------------
1.Absolute xpath
--------------------
- starts from root node to identify element
- starts with '/'

/html/body/div[2]/div/div/div/div[2]/div/form/div[1]/input

2.Relative xpath
----------------------
- starts from any element relative property
- starts with '//'

//*[@id="input-email"]

* any tag 
=========================================

Syntax:
==============
//tagname[@attribute='value']


Xpath with operators
-------------------
1.and
--------
Syntax:
===========
//tagname[@attribute1='value' and @attibute2='value']

2.or
-----------
Syntax:
============
//tagname[@attribute1='value' or @attibute2='value']

Xpath with Index & position()
----------------------------------
Indexing
============
(xpath)[index]

(xpath)[position()=index]


Xpath Methods
------------------
1.text()

2.normalize-space()

3.contains()

4.startsWith()


Xpath Axies(dynamic element)
-----------------------------
1.ancestor
2.parent
3.child
4.following
5.following sibling
6.preceding
7.preceding sibling





























































	
	
	
	
	
	
	
	
	
	
	
	
	





































